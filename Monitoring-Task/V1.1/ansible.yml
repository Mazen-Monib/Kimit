---
- name: Install Monitoring Stack
  hosts: all
  become: true
  tasks:
    - name: Install Docker Engine
      block:
        - name: Install Docker dependencies
          apt:
            name:
              - apt-transport-https
              - ca-certificates
              - curl
              - software-properties-common
            state: present

        - name: Add Docker GPG key
          apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present

        - name: Add Docker repository
          apt_repository:
            repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
            state: present

        - name: Install Docker CE
          apt:
            name: docker-ce
            state: present
            update_cache: yes

        - name: Start and enable Docker service
          systemd:
            name: docker
            state: started
            enabled: yes

    - name: Install Prometheus
      block:
        - name: Create Prometheus user
          user:
            name: prometheus
            system: yes
            shell: /bin/false

        - name: Download Prometheus
          get_url:
            url: https://github.com/prometheus/prometheus/releases/download/v2.45.0/prometheus-2.45.0.linux-amd64.tar.gz
            dest: /tmp/prometheus.tar.gz

        - name: Extract Prometheus
          unarchive:
            src: /tmp/prometheus.tar.gz
            dest: /opt/
            remote_src: yes

        - name: Create Prometheus directories
          file:
            path: "{{ item }}"
            state: directory
            owner: prometheus
            group: prometheus
          loop:
            - /etc/prometheus
            - /var/lib/prometheus

        - name: Configure Prometheus
          template:
            src: prometheus.yml.j2
            dest: /etc/prometheus/prometheus.yml
            owner: prometheus
            group: prometheus

        - name: Create Prometheus service
          template:
            src: prometheus.service.j2
            dest: /etc/systemd/system/prometheus.service

    - name: Install Node Exporter
      block:
        - name: Download Node Exporter
          get_url:
            url: https://github.com/prometheus/node_exporter/releases/download/v1.6.0/node_exporter-1.6.0.linux-amd64.tar.gz
            dest: /tmp/node_exporter.tar.gz

        - name: Extract Node Exporter
          unarchive:
            src: /tmp/node_exporter.tar.gz
            dest: /opt/
            remote_src: yes

        - name: Create Node Exporter service
          template:
            src: node_exporter.service.j2
            dest: /etc/systemd/system/node_exporter.service

    - name: Install Grafana
      block:
        - name: Add Grafana repository
          apt_repository:
            repo: deb https://packages.grafana.com/oss/deb stable main
            state: present

        - name: Add Grafana GPG key
          apt_key:
            url: https://packages.grafana.com/gpg.key
            state: present

        - name: Install Grafana package
          apt:
            name: grafana
            state: latest
            update_cache: yes

        - name: Start Grafana service
          systemd:
            name: grafana-server
            state: started
            enabled: yes

    - name: Install cAdvisor
      block:
        - name: Pull cAdvisor Docker image
          docker_image:
            name: gcr.io/cadvisor/cadvisor
            tag: latest
            source: pull

        - name: Run cAdvisor container
          docker_container:
            name: cadvisor
            image: gcr.io/cadvisor/cadvisor:latest
            state: started
            restart_policy: always
            ports:
              - "8080:8080"
            volumes:
              - "/:/rootfs:ro"
              - "/var/run:/var/run:rw"
              - "/sys:/sys:ro"
              - "/var/lib/docker/:/var/lib/docker:ro"

    - name: Reload Prometheus service
      systemd:
        name: prometheus
        state: reloaded
